#!/usr/bin/env node
const fs = require("fs");

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('09praktika:server');
const https = require('https');
const http = require('http');

/**
 * config
 */
const config = require('config');

const keyPem = config.get("sslConfig.keyPath") ?? 'key.pem';
const certPem = config.get("sslConfig.certPath") ?? 'cert.pem';
const allowHttp = config.get("sslConfig.allowHttp") ?? false;
const httpsPort = config.get("httpsPort") ?? 443;
const httpPort = config.get("httpPort") ?? 80;

/**
 * Create HTTP server.
 */
if (allowHttp) {
    const httpPortNormalize = normalizePort(httpPort || '80');
    const httpServer = http.createServer(app);
    httpServer.listen(httpPortNormalize);
    httpServer.on('error', onError);
    httpServer.on('listening', onListening);
}
/**
 * https
 */

const options = {
    // key: fs.readFileSync(keyPem, 'utf-8'),
    // cert: fs.readFileSync(certPem, 'utf-8')
};

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(httpsPort || process.env.PORT || '443');
app.set('port', port);

/**
 * Create HTTPS server.
 */
const server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    writeLog(`www ${error}; ${error.status}\n${error.message}`);
  if (error.syscall !== 'listen') {
    throw error;
  }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

function writeLog(str) {
    let date = new Date;
    fs.appendFile('logs/server-errors.txt',`${str} | ${date.toLocaleString('en-GB')}\n`,'utf8',(err) => {
        if (err) throw err;
    });
}